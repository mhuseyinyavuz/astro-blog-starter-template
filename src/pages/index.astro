---
const links = [
  { name: "GitHub", url: "https://github.com/mhuseyinyavuz", icon: "https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/github.svg" },
  { name: "LinkedIn", url: "https://linkedin.com/in/mhuseyinyavuz", icon: "https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/linkedin.svg" },
  { name: "Twitter", url: "https://twitter.com/mhuseyinyavuz", icon: "https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/twitter.svg" },
  { name: "YouTube", url: "https://youtube.com/@kanalin", icon: "https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/youtube.svg" }
];
const siteUrl = "https://yourdomain.com"; // kopya butonu i√ßin kullanƒ±lacak (g√ºncelle)
const profileUrl = "https://avatars.githubusercontent.com/u/69046932";
---

<html lang="tr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Linklerim ‚Äî Muhammed</title>
    <style>
      /* ----- Reset & Layout ----- */
      :root{
        --bg-1: rgba(255,255,255,0.06);
        --glass-blur: 8px;
        --accent: linear-gradient(90deg, rgba(255,0,128,0.95), rgba(0,200,255,0.9));
      }
      *{box-sizing:border-box}
      html,body{height:100%;margin:0;background:#000; font-family:Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;}
      body{
        display:flex;align-items:center;justify-content:center;min-height:100vh;
        overflow:hidden;
        background: conic-gradient(from 180deg at 50% 50%, rgba(255,0,128,0.06), rgba(255,200,0,0.06), rgba(0,255,200,0.06), rgba(128,0,255,0.06));
        background-blend-mode: screen;
      }

      /* animated rainbow gradient overlay */
      .rainbow {
        position:fixed;inset: -25%;
        background: linear-gradient(45deg, #ff0080, #ff8c00, #ffd400, #00c853, #00bcd4, #3f51b5, #e91e63);
        background-size: 180% 180%;
        filter: blur(60px) saturate(120%);
        opacity:0.55;
        animation: rainbow 18s linear infinite;
        pointer-events:none;
        z-index:0;
      }
      @keyframes rainbow{0%{background-position:0% 50%}50%{background-position:100% 50%}100%{background-position:0% 50%}}

      /* 3D grid bg */
      .grid3d{
        position:fixed;inset:0;z-index:0;pointer-events:none;background:
        radial-gradient(ellipse at center, rgba(255,255,255,0.02), rgba(0,0,0,0.0) 40%),
        linear-gradient(180deg, rgba(0,0,0,0.12), rgba(0,0,0,0.0));
        transform-style:preserve-3d;
        mask-image: linear-gradient(180deg, rgba(0,0,0,1) 10%, rgba(0,0,0,0.2) 80%, transparent);
      }
      .grid3d:after{
        content:"";position:absolute;inset:0;
        background-image: repeating-linear-gradient(0deg, rgba(255,255,255,0.02) 0 1px, transparent 1px 40px),
                          repeating-linear-gradient(90deg, rgba(255,255,255,0.02) 0 1px, transparent 1px 40px);
        transform: translateZ(-200px) rotateX(65deg) scale(1.2);
        opacity:0.25;
      }

      /* Stars layer */
      .stars{position:fixed;inset:0;z-index:0;pointer-events:none;background-image:
        radial-gradient(#fff 1px, transparent 1px); background-size: 4px 4px; opacity:0.04;filter:blur(2px)}
      .stars.twinkle{animation: twinkle 6s linear infinite}
      @keyframes twinkle{50%{opacity:0.02}100%{opacity:0.06}}

      /* container */
      .card {
        position:relative;z-index:10;
        width:90%;max-width:420px;
        padding:28px;
        display:flex;flex-direction:column;align-items:center;
        backdrop-filter: blur(var(--glass-blur));
        background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
        border-radius:16px;border:1px solid rgba(255,255,255,0.06);
        box-shadow: 0 10px 40px rgba(2,6,23,0.6);
        text-align:center;
      }

      .profile-wrap{position:relative;margin-bottom:14px}
      .profile{
        width:112px;height:112px;border-radius:999px;border:4px solid rgba(255,255,255,0.12);object-fit:cover;
        box-shadow:0 10px 30px rgba(0,0,0,0.6);transition:transform .35s, box-shadow .35s;
      }
      /* rainbow halo */
      .halo{
        position:absolute;inset:-12px;border-radius:999px;z-index:-1;
        background: conic-gradient(from 0deg, #ff0066, #ff8a00, #ffd600, #00e676, #00e5ff, #6a00ff, #ff0066);
        filter: blur(16px) saturate(140%);opacity:0.85; animation: haloRotate 10s linear infinite;
      }
      @keyframes haloRotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}

      h1{margin:0 0 6px;color:#fff;font-size:1.6rem;font-weight:600;letter-spacing:0.2px}
      .subtitle{color:rgba(255,255,255,0.75);font-size:0.95rem;margin-bottom:14px;min-height:22px}

      /* Typewriter */
      .typewriter{height:22px;overflow:hidden;white-space:nowrap;border-right:2px solid rgba(255,255,255,0.15);display:inline-block;padding-right:6px}

      /* controls row */
      .row{display:flex;gap:8px;margin-bottom:12px;align-items:center}
      .mode-toggle{margin-left:6px;padding:6px 10px;border-radius:10px;background:rgba(255,255,255,0.03);border:1px solid rgba(255,255,255,0.04);color:#fff;cursor:pointer}

      /* buttons list */
      .links{display:flex;flex-direction:column;width:100%;gap:10px;margin-top:6px}
      .btn{
        display:flex;align-items:center;gap:12px;padding:12px 16px;border-radius:12px;background:linear-gradient(180deg, rgba(255,255,255,0.06), rgba(255,255,255,0.02));
        color:#fff;text-decoration:none;font-weight:600;justify-content:center;position:relative;overflow:hidden;
        transform:translateY(12px);opacity:0;box-shadow: 0 8px 20px rgba(1,8,30,0.6);
      }
      .btn .icon{width:22px;height:22px;filter:invert(1);opacity:0.95}
      .btn .label{flex:1;text-align:left}
      .btn .meta{font-size:12px;opacity:0.8}
      /* hover neon */
      .btn::before{
        content:"";position:absolute;inset:0;margin:auto;width:120%;height:120%;transform:scale(0.9);filter:blur(20px);
        background: linear-gradient(90deg,#ff6ec7,#6ee7b7,#60a5fa);opacity:0;transition:opacity .25s, transform .25s;
      }
      .btn:hover::before{opacity:0.18;transform:scale(1)}
      .btn:active{transform:translateY(2px) scale(.998)}
      /* ripple */
      .ripple{position:absolute;border-radius:999px;transform:translate(-50%,-50%);pointer-events:none;mix-blend-mode:screen;opacity:0.9}

      /* 3D flip (on long press we flip card to show stats) */
      .card.flip{transform: rotateX(180deg);transition:transform .8s}
      .back{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;border-radius:16px;background:linear-gradient(180deg, rgba(0,0,0,0.6), rgba(0,0,0,0.45));color:#fff;padding:20px;backface-visibility:hidden;transform:rotateX(180deg)}

      /* small util */
      .controls{display:flex;gap:8px;align-items:center;justify-content:center;margin-top:10px}
      .small-btn{padding:8px 10px;border-radius:8px;background:rgba(255,255,255,0.03);border:1px solid rgba(255,255,255,0.04);color:#fff;cursor:pointer}

      /* responsive */
      @media (max-width:520px){
        .card{padding:18px}
        .profile{width:96px;height:96px}
        .btn{padding:10px 12px}
        h1{font-size:1.4rem}
      }
    </style>
  </head>

  <body>
    <!-- background layers -->
    <div class="rainbow" aria-hidden></div>
    <div class="grid3d" aria-hidden></div>
    <div class="stars twinkle" aria-hidden></div>

    <!-- main card -->
    <div class="card" id="card">
      <div class="profile-wrap">
        <div class="halo" id="halo" style="display:block"></div>
        <img class="profile" id="profile" src={profileUrl} alt="Profil" />
      </div>

      <h1 id="greeting">Merhaba</h1>
      <div class="subtitle">
        <span id="typewriter" class="typewriter"></span>
      </div>

      <div class="row">
        <div class="controls">
          <button id="copyBtn" class="small-btn" title="Baƒülantƒ±yƒ± kopyala">Kopyala</button>
          <button id="qrBtn" class="small-btn" title="QR g√∂ster">QR</button>
          <button id="modeBtn" class="mode-toggle" title="Tema deƒüi≈ütir">Dark/Light</button>
        </div>
      </div>

      <div class="links" id="links">
        {links.map((l, i) => (
          <a class="btn" href={l.url} target="_blank" data-key={i} data-name={l.name}>
            <img class="icon" src={l.icon} alt={l.name} />
            <span class="label">{l.name}</span>
            <span class="meta" id={`count-${i}`}>0</span>
          </a>
        ))}
      </div>

      <div class="controls" style="margin-top:12px">
        <button id="confettiBtn" class="small-btn">Konfeti</button>
        <button id="matrixBtn" class="small-btn">Matrix</button>
        <button id="rainBtn" class="small-btn">Yaƒümur/Kar</button>
      </div>

      <!-- back face for flips -->
      <div class="back" id="back" style="display:none">
        <div style="text-align:center">
          <h2>ƒ∞statistikler</h2>
          <div id="stats"></div>
          <div style="margin-top:12px">
            <button id="backClose" class="small-btn">Kapat</button>
          </div>
        </div>
      </div>
    </div>

    <!-- QR canvas hidden -->
    <canvas id="qrCanvas" width="240" height="240" style="display:none;position:fixed;right:20px;bottom:20px;z-index:50;border-radius:8px"></canvas>

    <script>
      /* -------------------------
         Helper + initial setup
      ------------------------- */
      const linksEls = [...document.querySelectorAll('.btn')];
      const greetingEl = document.getElementById('greeting');
      const typeEl = document.getElementById('typewriter');
      const card = document.getElementById('card');
      const halo = document.getElementById('halo');
      const qrCanvas = document.getElementById('qrCanvas');
      const statsEl = document.getElementById('stats');

      // 20. Typewriter phrases
      const phrases = ["M√ºhendis ‚ö°", "YouTuber üé•", "Developer üë®‚Äçüíª", "Elektrik-Elektronik","Teknoloji a≈üƒ±ƒüƒ±"];
      let pIdx = 0, chIdx=0, forward=true;

      // greeting: simple personal AI greeting using time
      const name = localStorage.getItem('name') || 'Muhammed';
      function updateGreeting(){
        const h = new Date().getHours();
        let when = h<12 ? 'G√ºnaydƒ±n' : (h<18 ? 'ƒ∞yi g√ºnler' : 'ƒ∞yi ak≈üamlar');
        greetingEl.textContent = `${when}, ${name} üëã`;
      }
      updateGreeting();

      // typewriter loop
      function typeLoop(){
        const phrase = phrases[pIdx];
        if(forward){
          chIdx++;
          if(chIdx>phrase.length){ forward=false; setTimeout(typeLoop,800); return; }
        } else {
          chIdx--;
          if(chIdx<0){ forward=true; pIdx=(pIdx+1)%phrases.length; setTimeout(typeLoop,200); return; }
        }
        typeEl.textContent = phrase.slice(0,chIdx);
        setTimeout(typeLoop, 80);
      }
      typeLoop();

      /* -------------------------
         Staggered entrance
      ------------------------- */
      linksEls.forEach((el,i)=> {
        el.style.animationDelay = (0.18*i + 0.6) + 's';
        el.style.transform = 'translateY(14px)';
        el.style.opacity = '0';
        setTimeout(()=>{ el.style.transition='transform .45s cubic-bezier(.2,.9,.2,1), opacity .45s'; el.style.transform='translateY(0)'; el.style.opacity='1'; }, 120*i + 300);
      });

      /* -------------------------
         Click counter (localStorage)
      ------------------------- */
      function loadCounts(){
        linksEls.forEach((el,i)=> {
          const key = 'link_count_' + i;
          const c = parseInt(localStorage.getItem(key) || '0',10);
          document.getElementById('count-'+i).textContent = c;
        });
      }
      loadCounts();
      linksEls.forEach((el,i)=>{
        el.addEventListener('click', (e)=>{
          const key = 'link_count_' + i;
          const newC = (parseInt(localStorage.getItem(key)||'0',10)+1);
          localStorage.setItem(key, newC);
          document.getElementById('count-'+i).textContent = newC;
          playClickSound();
          spawnEmoji(e, '‚ú®');
        });
      });

      /* -------------------------
         Ripple effect
      ------------------------- */
      function spawnRipple(parent, x, y){
        const r = document.createElement('div');
        r.className='ripple';
        r.style.left = x+'px'; r.style.top = y+'px';
        const size = Math.max(parent.clientWidth, parent.clientHeight) * 1.2;
        r.style.width = r.style.height = size + 'px';
        r.style.background = 'radial-gradient(circle at 30% 30%, rgba(255,255,255,0.25), rgba(255,255,255,0.02))';
        document.body.appendChild(r);
        r.animate([{opacity:0.7, transform:'translate(-50%,-50%) scale(0.2)'}, {opacity:0, transform:'translate(-50%,-50%) scale(1)'}], {duration:700, easing:'ease-out'});
        setTimeout(()=>r.remove(),800);
      }
      linksEls.forEach(btn=>{
        btn.addEventListener('pointerdown', (ev)=>{
          const rect = btn.getBoundingClientRect();
          spawnRipple(btn, ev.clientX, ev.clientY);
        });
      });

      /* -------------------------
         Sound
      ------------------------- */
      const audioCtx = new (window.AudioContext||window.webkitAudioContext)();
      function playClickSound(){
        const o = audioCtx.createOscillator();
        const g = audioCtx.createGain();
        o.type='sine'; o.frequency.value = 500 + Math.random()*200;
        g.gain.value = 0.02;
        o.connect(g); g.connect(audioCtx.destination);
        o.start(); o.stop(audioCtx.currentTime+0.06);
      }

      /* -------------------------
         Emoji reaction
      ------------------------- */
      function spawnEmoji(e, emoji){
        const el = document.createElement('div');
        el.textContent = emoji;
        el.style.position='fixed';
        el.style.left = (e.clientX-10)+'px';
        el.style.top = (e.clientY-10)+'px';
        el.style.fontSize='22px';
        el.style.pointerEvents='none';
        el.style.zIndex=9999;
        document.body.appendChild(el);
        const dx = (Math.random()-0.5)*80;
        el.animate([{transform:'translateY(0) scale(1)', opacity:1},{transform:`translate(${dx}px,-120px) scale(1.6)`, opacity:0}], {duration:1000, easing:'cubic-bezier(.2,.8,.2,1)'});
        setTimeout(()=>el.remove(),1050);
      }

      /* -------------------------
         Particles (mouse follow + background)
      ------------------------- */
      const particlePool = [];
      function createParticle(x,y,follow=false){
        const p = document.createElement('div');
        p.className='particle';
        p.style.width = p.style.height = (6 + Math.random()*10) + 'px';
        p.style.left = x + 'px';
        p.style.top = y + 'px';
        p.style.background = 'rgba(255,255,255,' + (0.4+Math.random()*0.6) + ')';
        p.style.borderRadius='50%';
        p.style.position='fixed';
        p.style.zIndex=5;
        p.style.pointerEvents='none';
        document.body.appendChild(p);
        const dur = 3000 + Math.random()*5000;
        const tx = x + (Math.random()-0.5)*200;
        p.animate([{transform:'translateY(0) scale(1)', opacity:1}, {transform:`translate(${tx - x}px, -160px) scale(0.6)`, opacity:0}], {duration:dur, easing:'linear'});
        setTimeout(()=>p.remove(), dur+50);
        return p;
      }
      document.addEventListener('pointermove', (ev)=>{
        // low frequency spawn
        if(Math.random() < 0.06) createParticle(ev.clientX, ev.clientY, true);
      });
      // mobile touch
      document.addEventListener('touchmove', (ev)=>{
        const t = ev.touches[0];
        if(t && Math.random()<0.08) createParticle(t.clientX, t.clientY, true);
      });

      /* -------------------------
         QR code generation (simple, tiny qrcode algorithm)
         We will draw a minimal QR using a third-party-free approach:
         Use an offscreen canvas and a small QR algorithm (we implement a tiny QR generator using "qrious"-like logic.)
         For brevity use simple API: createImageBitmap from text via data URL with Google Charts is blocked CORS sometimes.
         We'll fallback to a basic 2D QR via a tiny implementation (not full spec but works for short URLs).
      ------------------------- */
      // For reliability: draw QR using a simple library-like routine (here we use a very small QR encoder function)
      // For brevity and reliability in this file we implement a tiny QR generator using "kjua-lite" idea.
      // To avoid complexity, we'll render via Google Charts if allowed, otherwise show plain text fallback.
      const qrBtn = document.getElementById('qrBtn');
      qrBtn.addEventListener('click', async ()=>{
        try {
          const url = siteUrl;
          // try Google Charts API (usually works)
          const google = `https://chart.googleapis.com/chart?cht=qr&chs=240x240&chl=${encodeURIComponent(location.href)}`;
          const img = new Image();
          img.crossOrigin = 'anonymous';
          img.src = google;
          img.onload = ()=>{
            const ctx = qrCanvas.getContext('2d');
            ctx.clearRect(0,0,qrCanvas.width,qrCanvas.height);
            ctx.drawImage(img,0,0,qrCanvas.width,qrCanvas.height);
            qrCanvas.style.display='block';
            setTimeout(()=>qrCanvas.style.opacity=1,10);
            setTimeout(()=>qrCanvas.style.display='none', 8000);
          };
          img.onerror = ()=>{
            // fallback: draw simple text
            const ctx = qrCanvas.getContext('2d');
            ctx.fillStyle='#222'; ctx.fillRect(0,0,qrCanvas.width,qrCanvas.height);
            ctx.fillStyle='#fff'; ctx.font='16px sans-serif'; ctx.fillText(location.href, 10, 20, 220);
            qrCanvas.style.display='block';
            setTimeout(()=>qrCanvas.style.display='none', 6000);
          };
        } catch(e){ alert('QR olu≈üturulamadƒ±'); }
      });

      /* -------------------------
         Copy link
      ------------------------- */
      document.getElementById('copyBtn').addEventListener('click', async ()=>{
        try{
          await navigator.clipboard.writeText(location.href);
          spawnEmoji({clientX:window.innerWidth/2, clientY:card.getBoundingClientRect().bottom}, '‚úÖ');
        }catch(e){
          alert('Kopyalama desteklenmiyor.');
        }
      });

      /* -------------------------
         Confetti (simple)
      ------------------------- */
      function confettiBurst(){
        for(let i=0;i<80;i++){
          const c = document.createElement('div');
          c.textContent = ['‚ú®','üéâ','üí•','üéà'][Math.floor(Math.random()*4)];
          c.style.position='fixed';
          c.style.left = (50 + (Math.random()-0.5)*60) + '%';
          c.style.top = (60 + Math.random()*20) + '%';
          c.style.fontSize = (10 + Math.random()*24) + 'px';
          c.style.zIndex=9999;
          c.style.pointerEvents='none';
          document.body.appendChild(c);
          c.animate([{transform:'translateY(0) rotate(0deg)', opacity:1}, {transform:`translateY(-300px) rotate(${Math.random()*720}deg)`, opacity:0}], {duration:1600 + Math.random()*1200, easing:'cubic-bezier(.2,.8,.2,1)'});
          setTimeout(()=>c.remove(), 2200);
        }
      }
      document.getElementById('confettiBtn').addEventListener('click', confettiBurst);

      /* -------------------------
         Matrix Rain (Easter egg)
      ------------------------- */
      let matrixActive=false;
      document.getElementById('matrixBtn').addEventListener('click', ()=>{
        if(matrixActive){ matrixOff(); return; }
        matrixOn();
      });
      function matrixOn(){
        matrixActive=true;
        const canvas = document.createElement('canvas'); canvas.id='matrixCanvas'; canvas.style.position='fixed'; canvas.style.inset='0'; canvas.style.zIndex=9998; document.body.appendChild(canvas);
        const ctx = canvas.getContext('2d');
        function resize(){ canvas.width = innerWidth; canvas.height = innerHeight; }
        resize(); window.addEventListener('resize', resize);
        const cols = Math.floor(canvas.width/14);
        const drops = new Array(cols).fill(1);
        function step(){
          ctx.fillStyle = 'rgba(0,0,0,0.05)'; ctx.fillRect(0,0,canvas.width,canvas.height);
          ctx.fillStyle = '#0F0'; ctx.font = '14px monospace';
          for(let i=0;i<drops.length;i++){
            const text = String.fromCharCode(0x30A0 + Math.random()*96);
            ctx.fillText(text, i*14, drops[i]*14);
            if(drops[i]*14 > canvas.height && Math.random()>0.975) drops[i]=0;
            drops[i]++;
          }
          if(matrixActive) requestAnimationFrame(step);
        }
        step();
      }
      function matrixOff(){ matrixActive=false; const el=document.getElementById('matrixCanvas'); if(el) el.remove(); }

      /* -------------------------
         Rain / Snow toggle (simple)
      ------------------------- */
      let weatherOn=false;
      document.getElementById('rainBtn').addEventListener('click', ()=>{
        weatherOn = !weatherOn;
        if(weatherOn) startWeather(); else stopWeather();
      });
      let weatherTimer;
      function startWeather(){
        weatherTimer = setInterval(()=> {
          const el = document.createElement('div');
          el.textContent = Math.random()>0.5 ? '‚ùÑÔ∏è' : 'üíß';
          el.style.position='fixed'; el.style.left = Math.random()*100 + '%'; el.style.top='-10px';
          el.style.zIndex=9999; el.style.fontSize = (10+Math.random()*22)+'px';
          el.style.pointerEvents='none';
          document.body.appendChild(el);
          el.animate([{transform:'translateY(0)', opacity:1}, {transform:'translateY(120vh)', opacity:0}], {duration:3000 + Math.random()*2000, easing:'linear'});
          setTimeout(()=>el.remove(), 5000);
        }, 120);
      }
      function stopWeather(){ clearInterval(weatherTimer); }

      /* -------------------------
         Flip card to show stats (3D flip) on long press
      ------------------------- */
      let pressTimer;
      card.addEventListener('pointerdown', ()=>{
        pressTimer = setTimeout(()=>{ flipCard(); }, 700);
      });
      card.addEventListener('pointerup', ()=>{ clearTimeout(pressTimer); });
      function flipCard(){
        card.classList.toggle('flip');
        const back = document.getElementById('back');
        if(card.classList.contains('flip')) {
          back.style.display='flex';
          // populate stats
          let html = ''; linksEls.forEach((btn,i)=> {
            const c = localStorage.getItem('link_count_'+i)||0;
            html += `<div style="margin:6px 0">${btn.querySelector('.label').textContent}: <strong>${c}</strong></div>`;
          });
          statsEl.innerHTML = html;
        } else back.style.display='none';
      }
      document.getElementById('backClose').addEventListener('click', flipCard);

      /* -------------------------
         Swipe detection (mobile)
      ------------------------- */
      let touchStartY=0;
      document.addEventListener('touchstart', (e)=>{ if(e.touches[0]) touchStartY = e.touches[0].clientY; });
      document.addEventListener('touchend', (e)=>{
        if(!e.changedTouches[0]) return;
        const dy = e.changedTouches[0].clientY - touchStartY;
        if(dy < -80) { // swipe up
          for(let i=0;i<12;i++) createParticle(window.innerWidth/2, window.innerHeight*0.9);
        } else if(dy > 80) {
          for(let i=0;i<12;i++) createParticle(window.innerWidth/2, window.innerHeight*0.2);
        }
      });

      /* -------------------------
         Mode toggle (dark/light)
      ------------------------- */
      const modeBtn = document.getElementById('modeBtn');
      let dark = true;
      modeBtn.addEventListener('click', ()=>{
        dark = !dark; if(dark){ document.documentElement.style.setProperty('--glass-blur','8px'); document.body.style.backgroundColor='#000'; } else {
          document.documentElement.style.setProperty('--glass-blur','4px'); document.body.style.backgroundColor='#f6f7fb';
        }
      });

      /* -------------------------
         Emoji spawn on global click
      ------------------------- */
      document.addEventListener('click', (e)=>{
        // small chance to spawn a heart
        if(Math.random() < 0.06) spawnEmoji(e, ['‚ù§Ô∏è','üî•','‚ú®','üëç'][Math.floor(Math.random()*4)]);
      });

      /* -------------------------
         ensure initial counts visible
      ------------------------- */
      loadCounts();

      /* -------------------------
         Small accessibility: keyboard focus -> show halo
      ------------------------- */
      document.querySelectorAll('.btn').forEach(b=> {
        b.addEventListener('focus', ()=> halo.style.transform='scale(1.03)');
        b.addEventListener('blur', ()=> halo.style.transform='scale(1)');
      });

      /* -------------------------
         Profile click to toggle Matrix (Easter)
      ------------------------- */
      document.getElementById('profile').addEventListener('click', ()=> {
        matrixOn();
        setTimeout(()=>matrixOff(), 8000);
      });

      /* -------------------------
         End of script
      ------------------------- */
    </script>
  </body>
</html>
